{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\trap\\\\crapp2\\\\src\\\\context\\\\authContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n//* CONTEXTO PARA CONCEDER ACCESO LUEGO DEL LOGIN o REGISTER *//\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { auth, firestore, colRef } from \"../firebase/firebase-config\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n\n  const context = useContext(authContext);\n  if (!context) throw new Error(\"There's not Auth Provider\");\n  return context;\n};\n\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function AuthProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  //* INICIALIZA EL ESTADO DEL USUARIO COMO NULL *//\n  const [user, setUser] = useState(null); //* FUNCIÓN PARA ESPERAR LA CARGA DEL NUEVO CONTEXTO *//\n\n  const [loading, setLoading] = useState(false); //* ENVÍA DATOS A FIREBASE *//\n\n  const signup = async (email, password) => {\n    const userCredentials = await createUserWithEmailAndPassword(auth, email, password).then(userFirebase => {\n      return userFirebase;\n    });\n    const docuRef = doc(firestore, `users/${userCredentials.user.uid}`);\n    setDoc(docuRef, {\n      rol: \"user\",\n      email: email\n    });\n  };\n\n  const login = async (email, password) => {\n    const userCredentials = await signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const logout = () => signOut(auth); //* LOGIN CON GOOGLE *//\n\n\n  const loginWithGoogle = () => {\n    const googleProvider = new GoogleAuthProvider();\n    return signInWithPopup(auth, googleProvider);\n  }; //* VERIFICA EL ACTUAL ESTADO DEL USUARIO *//\n\n\n  useEffect(() => {\n    onAuthStateChanged(auth, currentUser => {\n      setUser(currentUser);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      signup,\n      login,\n      logout,\n      loginWithGoogle,\n      loading,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this) //* RETORNA LOS VALORES PARA EL CONTEXTO ACTUAL DE LA AUTENTICACIÓN *//\n  ;\n}\n\n_s2(AuthProvider, \"Vot/f62t7wRmBOt67JIN3/+eVxk=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/User/Desktop/trap/crapp2/src/context/authContext.js"],"names":["createContext","useContext","useEffect","useState","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStateChanged","signOut","GoogleAuthProvider","signInWithPopup","auth","firestore","colRef","doc","setDoc","getDoc","authContext","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","signup","email","password","userCredentials","then","userFirebase","docuRef","uid","rol","login","logout","loginWithGoogle","googleProvider","currentUser"],"mappings":";;;;AAAA;AAEA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,8BAAT,EAAyCC,0BAAzC,EAAqEC,kBAArE,EAAyFC,OAAzF,EAAkGC,kBAAlG,EAAsHC,eAAtH,QAA6I,eAA7I;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,MAA1B,QAAwC,6BAAxC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,QAAoC,oBAApC;;AAEA,OAAO,MAAMC,WAAW,gBAAGhB,aAAa,EAAjC;AAEP,OAAO,MAAMiB,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGjB,UAAU,CAACe,WAAD,CAA1B;AACA,MAAI,CAACE,OAAL,EAAc,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACd,SAAOD,OAAP;AACH,CAJM;;GAAMD,O;;AAOb,OAAO,SAASG,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAEvC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,IAAD,CAAhC,CAHuC,CAKvC;;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,KAAD,CAAtC,CANuC,CAQvC;;AACA,QAAMuB,MAAM,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtC,UAAMC,eAAe,GAAG,MAAMzB,8BAA8B,CACxDM,IADwD,EAExDiB,KAFwD,EAGxDC,QAHwD,CAA9B,CAGhBE,IAHgB,CAGVC,YAAD,IAAkB;AAC7B,aAAOA,YAAP;AACH,KALyB,CAA9B;AAMA,UAAMC,OAAO,GAAGnB,GAAG,CAACF,SAAD,EAAa,SAAQkB,eAAe,CAACP,IAAhB,CAAqBW,GAAI,EAA9C,CAAnB;AACAnB,IAAAA,MAAM,CAACkB,OAAD,EAAU;AAACE,MAAAA,GAAG,EAAE,MAAN;AAAcP,MAAAA,KAAK,EAAEA;AAArB,KAAV,CAAN;AAEH,GAVD;;AAYA,QAAMQ,KAAK,GAAG,OAAOR,KAAP,EAAcC,QAAd,KAA2B;AACrC,UAAMC,eAAe,GAAG,MAAMxB,0BAA0B,CAACK,IAAD,EAAOiB,KAAP,EAAcC,QAAd,CAAxD;AACH,GAFD;;AAIA,QAAMQ,MAAM,GAAG,MAAM7B,OAAO,CAACG,IAAD,CAA5B,CAzBuC,CA2BvC;;;AACA,QAAM2B,eAAe,GAAG,MAAM;AAC1B,UAAMC,cAAc,GAAG,IAAI9B,kBAAJ,EAAvB;AACA,WAAOC,eAAe,CAACC,IAAD,EAAO4B,cAAP,CAAtB;AACH,GAHD,CA5BuC,CAiCvC;;;AACApC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,kBAAkB,CAACI,IAAD,EAAO6B,WAAW,IAAI;AACpChB,MAAAA,OAAO,CAACgB,WAAD,CAAP;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHiB,CAAlB;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAF;AAAUS,MAAAA,KAAV;AAAiBC,MAAAA,MAAjB;AAAyBC,MAAAA,eAAzB;AAA0Cb,MAAAA,OAA1C;AAAmDF,MAAAA;AAAnD,KAA7B;AAAA,cAAyFD;AAAzF;AAAA;AAAA;AAAA;AAAA,UADJ,CAC8H;AAD9H;AAGH;;IA5CeD,Y;;KAAAA,Y","sourcesContent":["//* CONTEXTO PARA CONCEDER ACCESO LUEGO DEL LOGIN o REGISTER *//\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\nimport { auth, firestore, colRef } from \"../firebase/firebase-config\";\r\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\r\n\r\nexport const authContext = createContext()\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(authContext)\r\n    if (!context) throw new Error(\"There's not Auth Provider\")\r\n    return context;\r\n}\r\n\r\n\r\nexport function AuthProvider({ children }) {\r\n\r\n    //* INICIALIZA EL ESTADO DEL USUARIO COMO NULL *//\r\n    const [user, setUser] = useState(null);\r\n\r\n    //* FUNCIÓN PARA ESPERAR LA CARGA DEL NUEVO CONTEXTO *//\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //* ENVÍA DATOS A FIREBASE *//\r\n    const signup = async (email, password) => {\r\n        const userCredentials = await createUserWithEmailAndPassword(\r\n            auth, \r\n            email, \r\n            password).then((userFirebase) => {\r\n                return userFirebase;\r\n            });\r\n        const docuRef = doc(firestore, `users/${userCredentials.user.uid}`);\r\n        setDoc(docuRef, {rol: \"user\", email: email})\r\n            \r\n    }\r\n    \r\n    const login = async (email, password) => {\r\n        const userCredentials = await signInWithEmailAndPassword(auth, email, password);\r\n    }\r\n\r\n    const logout = () => signOut(auth);\r\n\r\n    //* LOGIN CON GOOGLE *//\r\n    const loginWithGoogle = () => {\r\n        const googleProvider = new GoogleAuthProvider();\r\n        return signInWithPopup(auth, googleProvider)\r\n    }\r\n\r\n    //* VERIFICA EL ACTUAL ESTADO DEL USUARIO *//\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, currentUser => {\r\n            setUser(currentUser);\r\n            setLoading(false);\r\n        })\r\n    }, [])\r\n    \r\n    return (\r\n        <authContext.Provider value={{ signup, login, logout, loginWithGoogle, loading, user }}>{children}</authContext.Provider> //* RETORNA LOS VALORES PARA EL CONTEXTO ACTUAL DE LA AUTENTICACIÓN *//\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}